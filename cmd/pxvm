#!/bin/bash

function pxvm_debug() {
  [ $DEBUG ] && echo -e "\033[1mDebug: ${1}\033[0m"
}

function pxvm_warn() {
  echo -e "\033[33mWarning: ${1}\033[0m"
}

function pxvm_info() {
  echo -e "\033[33mInfo: ${1}\033[0m"
}

function pxvm_error() {
  echo -e "\033[31mError: ${1}\033[0m"
}

function pxvm_success() {
  echo -e "\033[32mSuccess: ${1}\033[0m"
}

pxvm_sub_command=${1}
pxvm_debug "Got subcommand ${PXVM_SUB_COMMAND}"
shift
pxvm_args=$*
pxvm_arg_list=($pxvm_args)
pxvm_debug "Got args ${pxvm_args}"
pxvm_initial_wd=$(pwd)
pxvm_install_dir=${HOME}/.pxvm

function pxvm_do_version() {
  echo "PXVM Version: 0.0.2+"
}

function pxvm_do_help() {
  echo "Commands:"
  echo "  pxvm h|help"
  echo "    => Show help message."
  echo "  pxvm v|version"
  echo "    => Show version."
  echo "  pxvm a|add <name> <source>"
  echo "    => Add a Prince XML version."
  echo "      name: Name of version (user-defined)"
  echo "      source: Path to tar.gz of Prince XML version"
  echo "  pxvm l|list"
  echo "    => List added Prince XML versions."
  echo "  pxvm s|system"
  echo "    => Use the system-installed Prince XML."
  echo "  pxvm u|use <name>"
  echo "    => Use a specified Prince XML version."
  echo "      name: Name of (previously added) version"
}

function pxvm_do_add() {
  if ! [ -d ${pxvm_install_dir} ]; then
    pxvm_error "PXVM install directory not detected"
    exit 1
  fi

  local added_name=${pxvm_arg_list[0]}
  local added_path_relative=${pxvm_arg_list[1]}
  if [ -z ${added_name} ] || [ -z ${added_path_relative} ]; then
    pxvm_error "Not all arguments supplied"
    exit 1
  fi

  local added_path_basename=$(basename ${added_path_relative})
  local added_extracted_dirname=${added_path_basename%.tar.gz}

  if ! [ -f ${added_path_relative} ]; then
    pxvm_error "Could not find relative file at ${added_path_relative}"
    exit 1
  fi

  local temp_dir=${pxvm_install_dir}/tmp
  pxvm_debug "Creating temp directory for extraction"
  mkdir ${temp_dir}
  pxvm_debug "Extracting into temp directory"
  tar -xzf ${added_path_relative} -C ${temp_dir}

  pxvm_debug "Moving to install directory: ${pxvm_install_dir}"
  cd ${pxvm_install_dir}

  local version_dir=versions/${added_name}
  if [ -d ${version_dir} ]; then
    pxvm_debug "Removing old version of name ${added_name}"
    rm -rf ${version_dir}
  fi
  pxvm_debug "Creating version directory: ${version_dir}"
  mkdir ${version_dir}
  pxvm_debug "Copying extracted files to version directory"
  cp -r tmp/${added_extracted_dirname}/lib/prince/* ${version_dir}
  
  pxvm_debug "Removing temp directory"
  rm -rf ./tmp

  pxvm_debug "Moving back to ${pxvm_initial_wd}"
  cd ${pxvm_initial_wd}

  pxvm_success "Added Prince XML version with name ${added_name}"
}

function pxvm_do_list() {
  local versions_path=${pxvm_install_dir}/versions
  if ! [ -d ${versions_path} ]; then
    pxvm_error "Prince versions install directory not detected"
    exit 1
  fi

  local currently_using=$(cat ${pxvm_install_dir}/bin/prince)
  local using_location=${currently_using#*/bash}
  using_location=${using_location%\$@}
  using_location=$(echo $using_location | tr -d '\n')
  currently_using_version=${using_location/#*\/versions\//}
  if [ "$using_location" = "$currently_using_version" ]; then
    currently_using_version="system"
  else
    currently_using_version=${currently_using_version%%\/*}
  fi

  pxvm_debug "Moving to versions directory: ${versions_path}"
  cd ${versions_path}
  echo "Available Prince XML Versions:"
  local prince_versions=($(find */ -maxdepth 0 -type d 2>/dev/null))
  if [ -z ${prince_versions[0]} ]; then
    echo "None"
  else
    for i in ${prince_versions[@]}; do echo -e "\033[96m${i%%/}\033[0m"; done
  fi

  echo -e "Currently Using: \033[96m${currently_using_version} @ ${using_location}\033[0m"

  cd ${pxvm_initial_wd}
}

function pxvm_do_system() {
  pxvm_debug "Moving to install directory: ${pxvm_install_dir}"
  cd $pxvm_install_dir

  local use_bin="./bin/prince"
  local tmp_prince="./tmp_prince"

  pxvm_debug "Moving current exec path to temp directory"
  [ -f ${use_bin} ] && mv ${use_bin} ${tmp_prince}
  hash -d prince 2>/dev/null
  
  pxvm_debug "Attempting to make executable with the system version"
  local system_prince_path=$(command -v prince)
  if [ -n $system_prince_path ] && ! echo $system_prince_path | grep -qc ".pxvm"; then
    pxvm_debug "Clean up old exec path and clear path hash"
    [ -f ${tmp_prince} ] && rm ${tmp_prince}

    pxvm_debug "System executable found at ${system_prince_path}"
    echo "#! /bin/bash" >> ${use_bin}
    echo "${system_prince_path} \$@" >> ${use_bin}

    chmod +x ${use_bin}
    hash -d prince 2>/dev/null
    pxvm_success "Now using system version of Prince XML"
  else
    [ -f ${tmp_prince} ] && mv ${tmp_prince} ${use_bin}
    pxvm_error "No system executable of Prince XML found"
  fi

  pxvm_debug "Moving back to initial directory: ${pxvm_initial_wd}"
}

function pxvm_do_use() {
  local use_name=${pxvm_arg_list[0]}
  
  if [ -z ${use_name} ]; then
    pxvm_error "Not all arguments supplied"
    exit 1
  fi

  if ! [ -d ${pxvm_install_dir} ]; then
    pxvm_error "PXVM install directory not detected"
    exit 1
  fi
  pxvm_debug "Moving to install directory: ${pxvm_install_dir}"
  cd ${pxvm_install_dir}

  local use_path=versions/${use_name}
  if ! [ -d ${use_path} ]; then
    pxvm_error "Cannot find added Prince version with name ${use_name}"
    exit 1
  fi

  pxvm_debug "Clean up old exec path and clear path hash"
  local use_bin=bin/prince
  [ -f ${use_bin} ] && rm ${use_bin}

  pxvm_debug "creating new exec path to ${pxvm_install_dir}/${use_path}/bin/prince in ${pxvm_install_dir}/${use_bin}"
  echo "#! /bin/bash" >> ${use_bin}
  echo "${pxvm_install_dir}/${use_path}/bin/prince \$@" >> ${use_bin}
  pxvm_debug "Making executable"
  chmod +x ${use_bin}

  pxvm_debug "Moving back to ${pxvm_initial_wd}"
  cd ${pxvm_initial_wd}

  pxvm_success "Now using Prince XML with name ${use_name}"
}

if [ -z ${pxvm_sub_command} ]; then
  pxvm_do_help
else
  case "${pxvm_sub_command}" in
    h | help)
      pxvm_do_help
      ;;
    v | version)
      pxvm_do_version
      ;;
    a | add)
      pxvm_do_add
      ;;
    l | list)
      pxvm_do_list
      ;;
    s | system)
      pxvm_do_system
      ;;
    u | use)
      pxvm_do_use
      ;;
    *)
      pxvm_error "Unrecognized subcommand. Try pxvm help."
      exit 1
  esac
fi

